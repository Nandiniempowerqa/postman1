{
	"info": {
		"_postman_id": "e6de893a-bb43-40fe-aff5-85dc15d82fe2",
		"name": "my_first_demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30738111"
	},
	"item": [
		{
			"name": "New Folder",
			"item": [
				{
					"name": "get req",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"successful get request\", () => {\r",
									"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"content-type header is present\", () => {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"});\r",
									"pm.test(\"content-type header is application/json\", () => {\r",
									" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Response time is less then 170ms\",() => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});   \r",
									"   \r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  \r",
									"});\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"location\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Phone\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"location\",\r",
									"    \"Phone\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"schema is valid\",function () {\r",
									"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/Students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"Students"
							]
						}
					},
					"response": []
				},
				{
					"name": "get req1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/Students/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"Students",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"successful get request\", () => {\r",
									"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"content-type header is present\", () => {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"});\r",
									"pm.test(\"content-type header is application/json\", () => {\r",
									" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Response time is less then 170ms\",() => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});   \r",
									"   \r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  \r",
									"});\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"location\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Phone\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"location\",\r",
									"    \"Phone\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"schema is valid\",function () {\r",
									"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nandini\" : \"nandini\",\r\n    \"phone\" : \"9876543321\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/Students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"Students"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"successful get request\", () => {\r",
									"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"content-type header is present\", () => {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"});\r",
									"pm.test(\"content-type header is application/json\", () => {\r",
									" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Response time is less then 170ms\",() => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});   \r",
									"   \r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  \r",
									"});\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"location\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Phone\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"location\",\r",
									"    \"Phone\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"schema is valid\",function () {\r",
									"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nandini\" : \"sivaarapu nandini\",\r\n    \"phone\" : \"9876543341\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/Students/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"Students",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"successful get request\", () => {\r",
									"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"content-type header is present\", () => {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"});\r",
									"pm.test(\"content-type header is application/json\", () => {\r",
									" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Response time is less then 170ms\",() => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});   \r",
									"   \r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  \r",
									"});\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"location\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Phone\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"location\",\r",
									"    \"Phone\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"schema is valid\",function () {\r",
									"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nandini\" : \"sivaarapu nandini\",\r\n    \"phone\" : \"9876543441\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/Students/32",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"Students",
								"32"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	]
}