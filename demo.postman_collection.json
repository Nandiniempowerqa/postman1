{
	"info": {
		"_postman_id": "ef2efe1d-bb4a-4f69-b36c-d542331b3980",
		"name": "demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30738111"
	},
	"item": [
		{
			"name": "get reguest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"successful get request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"content-type header is present\", () => {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"pm.test(\"content-type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Response time is less then 170ms\",() => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(504);\r",
							"});   \r",
							"   \r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"  \r",
							"});\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Phone\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"Phone\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema is valid\",function () {\r",
							"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{first_global}}/api/users?page=2",
					"host": [
						"{{first_global}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"successful get request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"content-type header is present\", () => {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"pm.test(\"content-type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Response time is less then 170ms\",() => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(555);\r",
							"});   \r",
							"   \r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"  \r",
							"});\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Phone\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"Phone\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema is valid\",function () {\r",
							"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "put reguest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"successful get request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"content-type header is present\", () => {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"pm.test(\"content-type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Response time is less then 170ms\",() => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});   \r",
							"   \r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"  \r",
							"});\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Phone\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"Phone\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema is valid\",function () {\r",
							"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"nandini\",\r\n    \"job\": \"enginner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/558",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"558"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch reguest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"successful get request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"content-type header is present\", () => {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"pm.test(\"content-type header is application/json\", () => {\r",
							" pm.expect(pm.response.headers.get('content-type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Response time is less then 170ms\",() => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});   \r",
							"   \r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"  \r",
							"});\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Phone\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"Phone\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema is valid\",function () {\r",
							"    pm.expect(tv4.validate(\"jsonData.schema\")).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"nandini\",\r\n    \"job\": \"software\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/558",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"558"
					]
				}
			},
			"response": []
		},
		{
			"name": "post reguest",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}